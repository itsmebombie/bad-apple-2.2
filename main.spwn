frametime = 1/30 // 30 fps
x_offset = 0 // when the video starts (at what x)
y_offset = 2000
canvas_offset = { x: 0, y: 0 }
canvas_scale = 10
frames_amt = 6513
max_vertices = 905
max_faces = 334
move_multiplier = 300 / 0.089588 // unit conversion from blender units to gd
player_speed = 8.36820065875 // 0.5x

// max values: x = 0.119476, y = 0.089588
data = $.readfile("out.json", "json")


extract obj_props
extract import obj_props_2_2



let curr_x = x_offset
let curr_y = y_offset
let next_id = 1

let vertices = [0]*max_vertices
let faces = [0]*max_faces



disable_gradient = (id) {
    if faces[id] == 0 { return }
    if faces[id][3] == false { return }

    $.add(obj{
        OBJ_ID: 2903, // gradient trigger
        SCALING: 0.25,
        X: curr_x, Y: curr_y,
        GR_VERTEX_MODE: true,
        GR_DISABLE: true,
        GR_ID: id,
    })

    curr_y -= 5
    faces[id][3] = false
}

enable_gradient = (a, b, c, id) {
    // create gradient (v1, v2, v3, enabled)
    if faces[id] == 0 { faces[id] = [a, b, c, false] }
    else if faces[id][0] == a && faces[id][1] == b && faces[id][2] == c { return }
    
    face = faces[id]

    $.add(obj{
        OBJ_ID: 2903, // gradient trigger
        SCALING: 0.25,
        X: curr_x, Y: curr_y,
        GR_VERTEX_MODE: true,
        GR_BL: vertices[a][2],
        GR_BR: vertices[b][2],
        GR_TL: vertices[c][2],
        GR_TR: vertices[a][2],
        GR_LAYER: 4,
        GR_ID: id,
    })

    curr_y -= 5
    faces[id][3] = true
}

let aa = 0
move_vertex = (v_idx, x, y) {
    let vertex = vertices[v_idx]

    if vertex == 0 {
        vertices[v_idx] = [x, y, ?g]
        vertex = vertices[v_idx]

        $.add(obj{
            OBJ_ID: 211, // white block
            SCALING: 0.025,
            X: x * move_multiplier,
            Y: -y * move_multiplier,
            GROUPS: vertex[2],
        })
    }

    to_move_x = $.round((x - vertex[0]) * move_multiplier * 100) / 100
    to_move_y = $.round(-(y - vertex[1]) * move_multiplier * 100) / 100

    if to_move_x == 0 && to_move_y == 0 { return }

    $.add(obj{
        OBJ_ID: 901, // move trigger
        X: curr_x-3, Y: curr_y,
        TARGET: vertex[2],
        MOVE_X: to_move_x,
        MOVE_Y: to_move_y,
        SCALING: 0.25,
        DURATION: 0,
    })

    curr_y -= 5

    vertices[v_idx][0] = x
    vertices[v_idx][1] = y
}

let frame = []
let frame_vertices = []
let frame_faces = []
draw_triangle = (triangle) {
    if triangle >= frame_faces.length { return } // not sure why this would be the case

    [a, b, c] = frame_faces[triangle]
    [ax, ay] = frame_vertices[a-1]
    [bx, by] = frame_vertices[b-1]
    [cx, cy] = frame_vertices[c-1]

    move_vertex(a, ax, ay)
    move_vertex(b, bx, by)
    move_vertex(c, cx, cy)
    enable_gradient(a, b, c, triangle)
}

hide_triangle = (triangle) {
    disable_gradient(triangle)
}


format_time = (time_sec: @number) {
    seconds = @string($.round(time_sec % 60))
    minutes = @string($.round(time_sec / 60) % 60)
    hours = @string($.round(time_sec / 3600) % 24)

    return ["0"*@number(hours.length==1) + hours, "0"*@number(minutes.length==1) + minutes, "0"*@number(seconds.length==1) + seconds]
}


let start_time = $.time()
let last_face_amt = 0

$.print("\n"*3)

for j in 0..frames_amt {
    data_len = data.length
    if j >= data_len { break }
    time = $.time()

    frame = data[j]

    if frame.type == @number { continue } // its empty

    frame_faces = frame[1]
    frame_vertices = frame[0]

    curr_x += frametime * player_speed * 30
    curr_y = y_offset


    for i in 0..last_face_amt-1 { draw_triangle(i) }
    for i in last_face_amt..frame_faces.length { hide_triangle(i) }
    
    last_face_amt = frame_faces.length


    max_frames = $.min(frames_amt, data_len) - 1
    delta_time = $.round(($.time() - time) * 1000) / 1000
    elapsed_time = $.round(($.time() - start_time) * 1000) / 1000
    eta = delta_time * (max_frames - j) - elapsed_time

    $.print("\u{1b}[4A\u{1b}[Gframe ", j, " / ", max_frames)
    $.print("Î” time = ", delta_time, "s")
    $.print("elapsed time: ", "{}:{}:{}".fmt(format_time(elapsed_time)))
    $.print("ETA: ", "{}:{}:{}".fmt(format_time(eta)))
}
